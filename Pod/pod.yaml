apiVersion: v1
kind: Pod
metadata:
  name: pod2
  labels:
    app: pod2
spec:
  topologySpreadConstraints:
    - maxSkew: 2 # 描述 Pod 分布不均的程度
      topologyKey: hello
      whenUnsatisfiable: DoNotSchedule
      labelSelector:
        matchLabels:
          hello: world
  initContainers: # 设置init容器等待myservice就绪后才会创建容器
    - name: init-pod
      image: busybox:latest
      command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
  containers:
    - name: pod2
      image: nginx:latest
      imagePullPolicy: IfNotPresent
      readinessProbe: #
        tcpSocket:
          port: 80
        initialDelaySeconds: 5
        periodSeconds: 10
        failureThreshold: 10
      livenessProbe:
        tcpSocket:
          port: 80
        initialDelaySeconds: 5
        periodSeconds: 10
        failureThreshold: 10
      resources:
        limits:
          memory: 256Mi
          cpu: "1"
        requests:
          memory: 256Mi
          cpu: "0.2"
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  nodeSelector:
    hello: world # 会被调度到含有此标签的节点上
  tolerations: # 容忍度，配合污点使用，避免pod被分配到不合适的节点上
    - key: "key1"
      operator: "Exists"
      effect: "NoSchedule"
  affinity: # pod亲和性
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution: # 调度器只有在规则被满足的时候才能执行调度
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                  - linux
      preferredDuringSchedulingIgnoredDuringExecution:  # 调度器会尝试寻找满足对应规则的节点。如果找不到匹配的节点，调度器仍然会调度该 Pod。
        - weight: 1
          preference:
            matchExpressions:
              - key: another-node-label-key
                operator: In
                values:
                  - another-node-label-value
